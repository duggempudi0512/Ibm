# -*- coding: utf-8 -*-
"""Mental_fitness_trackeer (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/102LcYi9uw9HcadEz0lZNjZIBHQhS2T2J

# importing libraries
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import os
from google.colab import drive
drive.mount('/content/drive')

import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import warnings
warnings.filterwarnings('ignore')

"""# reading data"""

df1 = pd.read_csv('/content/drive/MyDrive/mental fitness/mental-disease.csv')
df2 =pd.read_csv('/content/drive/MyDrive/mental fitness/prevalence-by-mental-and-substance-use-disorder.csv')

df1.head()

df2.head()

"""### merging two datasets"""

data = pd.merge(df1, df2)
data.head()

"""# data cleaning"""

data.isnull().sum()

data.drop('Code',axis=1,inplace=True)

data.head()

data.size,data.shape

data.set_axis(['Country','Year','Schizophrenia', 'Bipolar_disorder', 'Eating_disorder','Anxiety','drug_usage','depression','alcohol','mental_fitness'], axis='columns', inplace=True)

data.head()

"""# explaratory data analysis(EDA)"""

plt.figure(figsize=(12,6))
sns.heatmap(data.corr(),annot=True,cmap='Blues')
plt.plot()

sns.jointplot(data=data,x='Bipolar_disorder',y='mental_fitness',kind='reg')
plt.show()

sns.jointplot(x='Schizophrenia',y='mental_fitness',data=data,kind='reg',color='m')
plt.show()

sns.pairplot(data,corner=True)
plt.show()

mean = data['mental_fitness'].mean()
mean

fig = px.pie(data, values='mental_fitness', names='Year')
fig.show()

"""# year wise variation in mental fitness in different countries"""

fig = px.line(data, x="Year", y="mental_fitness", color='Country',markers=True,color_discrete_sequence=['red','blue'],template='plotly_dark')
fig.show()

df = data.copy()

df.head()

df.info()

from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
for i in df.columns:
    if df[i].dtype == 'object':
        df[i]=l.fit_transform(df[i])

X = df.drop('mental_fitness',axis=1)
y = df['mental_fitness']

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=2)

X = df.drop('mental_fitness',axis=1)
y = df['mental_fitness']

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=2)

"""# applying classification algorithm

# linear regression
"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
lr = LinearRegression()
lr.fit(xtrain,ytrain)

# model evaluation for training set
ytrain_pred = lr.predict(xtrain)
mse = mean_squared_error(ytrain, ytrain_pred)
rmse = (np.sqrt(mean_squared_error(ytrain, ytrain_pred)))
r2 = r2_score(ytrain, ytrain_pred)

print("The model performance for training set")
print("--------------------------------------")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")

# model evaluation for testing set
ytest_pred = lr.predict(xtest)
mse = mean_squared_error(ytest, ytest_pred)
rmse = (np.sqrt(mean_squared_error(ytest, ytest_pred)))
r2 = r2_score(ytest, ytest_pred)

print("The model performance for testing set")
print("--------------------------------------")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))

"""# random forest regression"""

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(xtrain, ytrain)

# model evaluation for training set
ytrain_pred = rf.predict(xtrain)
mse = mean_squared_error(ytrain, ytrain_pred)
rmse = (np.sqrt(mean_squared_error(ytrain, ytrain_pred)))
r2 = r2_score(ytrain, ytrain_pred)

print("The model performance for training set")
print("--------------------------------------")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")

# model evaluation for testing set
ytest_pred = rf.predict(xtest)
mse = mean_squared_error(ytest, ytest_pred)
rmse = (np.sqrt(mean_squared_error(ytest, ytest_pred)))
r2 = r2_score(ytest, ytest_pred)

print("The model performance for testing set")
print("--------------------------------------")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))

"""# decission tree regression"""

from sklearn.tree import DecisionTreeRegressor
dtr=DecisionTreeRegressor(random_state=0)
dtr.fit(xtrain,ytrain)

#predicting the value

ytest_pred=dtr.predict(xtest)

#evaluating the model

from sklearn.metrics import r2_score,mean_squared_error
print("Results for Decision Tree Regression:\n1)Mean Square Error={}\n2)R-Square Score={}".format(mean_squared_error(ytest,ytest_pred),r2_score(ytest,ytest_pred)))

"""# svm regression"""

from sklearn.svm import SVR
svr=SVR()
svr.fit(xtrain,ytrain)

#predicting the value

ytest_pred=svr.predict(xtest)

#evaluating the model

from sklearn.metrics import r2_score,mean_squared_error
print("Results for SVM Regression:\n1)Mean Square Error={}\n2)R-Square Score={}".format(mean_squared_error(ytest,ytest_pred),r2_score(ytest,ytest_pred)))

"""# conclusion

Random Forest Regression works well on both train and test sets with r2 score of 0.99.
 As well as Decision Tree Regression also works well on both train and test set with r2 score of 0.98.
"""

np.random.seed(range(0,100))
print("Welcome to Mental Fitness Tracker!\nFill the detail to check your mental fitness!")
country=l.fit_transform([input('Enter Your country Name:')])
year=int(input("Enter the Year:"))
schi=(float(input("Enter your Schizophrenia rate in % (it not enter 0):")))*100
bipo_dis=(float(input("Enter your Bipolar disorder rate in % (it not enter 0):")))*100
eat_dis=(float(input("Enter your Eating disorder rate in % (it not enter 0):")))*100
anx=(float(input("Enter your Anxiety rate in % (it not enter 0):")))*100
drug_use=(float(input("Enter your Drug Usage rate in per year % (it not enter 0):")))*100
depr=(float(input("Enter your Depression rate in % (it not enter 0):")))*100
alch=(float(input("Enter your Alcohol Consuming rate per year in % (it not enter 0):")))*100

prediction=rf.predict([[country,year,schi,bipo_dis,eat_dis,anx,drug_use,depr,alch]])
print("Your Mental Fitness is {}%".format(prediction))
print("Bye...!")